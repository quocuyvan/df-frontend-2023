/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * Swagger API
 * This is a swagger for API.
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse } from 'axios'

export type GetBooksParams = {
  /**
   * Page
   */
  page?: number
  /**
   * Page Size
   */
  pageSize?: number
  /**
   * Sort
   */
  sort?: string
  /**
   * Query
   */
  query?: string
  /**
   * Topic ID
   */
  topicId?: number
}

export interface User {
  avatar: string
  email: string
  fullName: string
  id: number
}

export interface UserResponse {
  data?: User
}

export interface UpdateUserRequest {
  avatar?: string
  fullName?: string
}

export interface UpdatePasswordRequest {
  newPassword: string
  oldPassword: string
}

export interface UpdateBookRequest {
  author?: string
  name?: string
  topicId?: number
}

export interface Topic {
  code?: string
  id?: number
  name?: string
}

export interface TopicsResponse {
  data?: Topic[]
}

export interface SignupRequest {
  avatar?: string
  email: string
  fullName: string
  password: string
}

export interface Metadata {
  hasNext?: boolean
  page: number
  pageSize: number
  sort?: number
  totalPages: number
  totalRecords: number
}

export interface Message {
  message: string
}

export interface MessageResponse {
  data?: Message
}

export interface Me {
  avatar: string
  email: string
  fullName: string
  id: number
}

export interface MeResponse {
  data?: Me
}

export interface LoginResponse {
  data?: Auth
}

export interface LoginRequest {
  email: string
  password: string
}

export interface ErrorDetail {
  error: string
  field: string
}

export interface ErrorResponse {
  code: string
  error: string
  errors?: ErrorDetail[]
  traceId: string
}

export interface CreateBookRequest {
  author: string
  name: string
  topicId: number
}

export interface Book {
  author?: string
  id: number
  name: string
  topic?: Topic
}

export interface BooksResponse {
  data?: Book[]
  metadata?: Metadata
}

export interface BookResponse {
  data?: Book
}

export interface Auth {
  accessToken: string
  email: string
  id: number
}

/**
 * Login to portal by email
 * @summary Login to portal
 */
export const login = <TData = AxiosResponse<LoginResponse>>(
  loginRequest: LoginRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/auth/login`, loginRequest, options)
}

/**
 * Signup
 * @summary Signup
 */
export const signup = <TData = AxiosResponse<MessageResponse>>(
  signupRequest: SignupRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/auth/signup`, signupRequest, options)
}

/**
 * Get list of books
 * @summary Get list of books
 */
export const getBooks = <TData = AxiosResponse<BooksResponse>>(
  params?: GetBooksParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/books`, {
    ...options,
    params: { ...params, ...options?.params },
  })
}

/**
 * Create new book
 * @summary Create new book
 */
export const createBook = <TData = AxiosResponse<BookResponse>>(
  createBookRequest: CreateBookRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/books`, createBookRequest, options)
}

/**
 * Get book by id
 * @summary Get book by id
 */
export const getBook = <TData = AxiosResponse<BookResponse>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/books/${id}`, options)
}

/**
 * Update book
 * @summary Update book
 */
export const updateBook = <TData = AxiosResponse<BookResponse>>(
  id: number,
  updateBookRequest: UpdateBookRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.put(`/books/${id}`, updateBookRequest, options)
}

/**
 * Delete book by id
 * @summary Delete book by id
 */
export const deleteBook = <TData = AxiosResponse<MessageResponse>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/books/${id}`, options)
}

/**
 * Retrieve my information
 * @summary Retrieve my information
 */
export const getMe = <TData = AxiosResponse<MeResponse>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/me`, options)
}

/**
 * Get all topics
 * @summary Get all topics
 */
export const getTopics = <TData = AxiosResponse<TopicsResponse>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/topics`, options)
}

/**
 * Update user
 * @summary Update user
 */
export const updateUser = <TData = AxiosResponse<UserResponse>>(
  updateUserRequest: UpdateUserRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.put(`/users`, updateUserRequest, options)
}

/**
 * Update user's password
 * @summary Update user's password
 */
export const updatePassword = <TData = AxiosResponse<MessageResponse>>(
  updatePasswordRequest: UpdatePasswordRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.put(`/users/password`, updatePasswordRequest, options)
}

export type LoginResult = AxiosResponse<LoginResponse>
export type SignupResult = AxiosResponse<MessageResponse>
export type GetBooksResult = AxiosResponse<BooksResponse>
export type CreateBookResult = AxiosResponse<BookResponse>
export type GetBookResult = AxiosResponse<BookResponse>
export type UpdateBookResult = AxiosResponse<BookResponse>
export type DeleteBookResult = AxiosResponse<MessageResponse>
export type GetMeResult = AxiosResponse<MeResponse>
export type GetTopicsResult = AxiosResponse<TopicsResponse>
export type UpdateUserResult = AxiosResponse<UserResponse>
export type UpdatePasswordResult = AxiosResponse<MessageResponse>
